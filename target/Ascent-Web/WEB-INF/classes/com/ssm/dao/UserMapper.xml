<?xml version="1.0" encoding="UTF-8" ?>
<!--
 * @Description: 将Java接口UserMapper中定义的方法与SQL语句进行映射,实现数据库访问功能
 * @FilePath: \src\main\java\com\ssm\dao\UserMapper.xml
 * @Author: hhrwvyy5654v huang_rongquan@outlook.com
 * @Date: 2023-06-05 11:32:03
 * @LastEditors: hhrwvyy5654v huang_rongquan@outlook.com
 * @LastEditTime: 2023-06-06 16:38:05
 * Copyright (c) 2023 by hhrwvyy5654v , All Rights Reserved. 
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssm.dao.UserMapper"> <!--指定命名空间,用于区分不同的Mapper文件-->

    <!--对应loginUsers()方法,用于用户登录-->
    <select id="loginUsers" parameterType="String" resultType="UserP">
        select *
        from shop_user
        where users = #{users}
          and password = #{password}
    </select>


    <!--对应updateUsers()方法,用于更新用户信息-->
    <update id="updateUsers" parameterType="UserP">
        UPDATE shop_user
        SET email=#{email},
            iphone=#{iphone},
            address=#{address}
        WHERE id = #{id}
    </update>


    <!--对应getUsersId()方法,用于根据用户ID查询用户-->
    <select id="getUsersId" parameterType="java.lang.Integer" resultType="UserP">
        select *
        from shop_user
        where id = #{id}
    </select>


    <!--对应updatePwds()方法,用于更新用户密码-->
    <update id="updatePwds" parameterType="UserP">
        UPDATE shop_user
        SET PASSWORD=#{password}
        WHERE id = #{id}
    </update>


    <!--对应addPlUsers()方法,用于添加用户信息-->
    <insert id="addPlUsers" parameterType="UserP">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id()
        </selectKey>
        INSERT INTO `shop_user`
        ( `users`,
        `password`,
        `email`,
        `iphone`,
        `address`)
        VALUES (#{users},
        #{password},
        #{email},
        '无',
        '无');
    </insert>


    <!--对应AdminGetUser()方法，用于管理员获取所有用户信息-->
    <select id="AdminGetUser" resultType="UserP">
        SELECT *
        FROM shop_user
    </select>


    <!--对应AdminDelsUsers方法,用于管理员删除用户信息-->
    <delete id="AdminDelsUsers" parameterType="java.lang.Integer">
        delete
        from shop_user
        where id = #{id}
    </delete>


    <!--将查询结果集中的列与UserPVo类和OnetoManyOrde类中的属性进行映射，方便后续的数据处理-->
    <resultMap type="com.ssm.po.UserPVo" id="OnetoManyOrde">
        <id column="userId" property="id"/>
        <result column="users" property="users"/>
        <collection property="lists" ofType="com.ssm.po.GoodsOrders">
            <id column="orderId" property="id"/>
            <result column="goods_name" property="goods_name"/>
        </collection>
    </resultMap>


    <!--对应AdminOneToManyOrdes()方法，用于用于管理员获取用户及其订单信息-->
    <select id="AdminOneToManyOrdes" resultMap="OnetoManyOrde">
        select s.id userId,
               s.users,
               o.id orderId,
               o.goods_name
        from shop_user s
                 left join orders o
                           on s.id = o.order_userid
    </select>

</mapper>